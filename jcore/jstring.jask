; Provides standard functions for string processing

function substring(str:s:e)
	if isString(str) equals FALSE return NULL else endif
	if isNumber(s) equals FALSE return NULL else endif
	if isNumber(e) equals FALSE return NULL else endif

	if s greater e return NULL else endif

	assign listFromString(str) to str
	
	store listSize(str) in size
	assign size minus 1 to size
	if s greater size return NULL else endif
	if e greater size return NULL else endif

	store list() in sub
	store NULL in temp

	increment e

	run s to e with s plus 1
		assign listGet(str:s) to temp
		assign listAdd(sub:temp) to sub
	endrun

	return listToString(sub)
end

function upper(str)
	if isString(str) equals FALSE return NULL else endif

	store listFromString(str) in oldList
	store list() in newList

	store 0 in i
	store listSize(oldList) in size
	store NULL in curChar

	while i smaller size
		assign listGet(oldList:i) to curChar

		if curChar equals "a" assign "A" to curChar else endif
		if curChar equals "b" assign "B" to curChar else endif
		if curChar equals "c" assign "C" to curChar else endif
		if curChar equals "d" assign "D" to curChar else endif
		if curChar equals "e" assign "E" to curChar else endif
		if curChar equals "f" assign "F" to curChar else endif
		if curChar equals "g" assign "G" to curChar else endif
		if curChar equals "h" assign "H" to curChar else endif
		if curChar equals "i" assign "I" to curChar else endif
		if curChar equals "j" assign "J" to curChar else endif
		if curChar equals "k" assign "K" to curChar else endif
		if curChar equals "l" assign "L" to curChar else endif
		if curChar equals "m" assign "M" to curChar else endif
		if curChar equals "n" assign "N" to curChar else endif
		if curChar equals "o" assign "O" to curChar else endif
		if curChar equals "p" assign "P" to curChar else endif
		if curChar equals "q" assign "Q" to curChar else endif
		if curChar equals "r" assign "R" to curChar else endif
		if curChar equals "s" assign "S" to curChar else endif
		if curChar equals "t" assign "T" to curChar else endif
		if curChar equals "u" assign "U" to curChar else endif
		if curChar equals "v" assign "V" to curChar else endif
		if curChar equals "w" assign "W" to curChar else endif
		if curChar equals "x" assign "X" to curChar else endif
		if curChar equals "y" assign "Y" to curChar else endif
		if curChar equals "z" assign "Z" to curChar else endif

		assign listAdd(newList:curChar) to newList
		increment i
	endrun

	return listToString(newList)
end

function lower(str)
	if isString(str) equals FALSE return NULL else endif

	store listFromString(str) in oldList
	store list() in newList

	store 0 in i
	store listSize(oldList) in size
	store NULL in curChar

	while i smaller size
		assign listGet(oldList:i) to curChar

		if curChar equals "A" assign "a" to curChar else endif
		if curChar equals "B" assign "b" to curChar else endif
		if curChar equals "C" assign "c" to curChar else endif
		if curChar equals "D" assign "d" to curChar else endif
		if curChar equals "E" assign "e" to curChar else endif
		if curChar equals "F" assign "f" to curChar else endif
		if curChar equals "G" assign "g" to curChar else endif
		if curChar equals "H" assign "h" to curChar else endif
		if curChar equals "I" assign "i" to curChar else endif
		if curChar equals "J" assign "j" to curChar else endif
		if curChar equals "K" assign "k" to curChar else endif
		if curChar equals "L" assign "l" to curChar else endif
		if curChar equals "M" assign "m" to curChar else endif
		if curChar equals "N" assign "n" to curChar else endif
		if curChar equals "O" assign "o" to curChar else endif
		if curChar equals "P" assign "p" to curChar else endif
		if curChar equals "Q" assign "q" to curChar else endif
		if curChar equals "R" assign "r" to curChar else endif
		if curChar equals "S" assign "s" to curChar else endif
		if curChar equals "T" assign "t" to curChar else endif
		if curChar equals "U" assign "u" to curChar else endif
		if curChar equals "V" assign "v" to curChar else endif
		if curChar equals "W" assign "w" to curChar else endif
		if curChar equals "X" assign "x" to curChar else endif
		if curChar equals "Y" assign "y" to curChar else endif
		if curChar equals "Z" assign "z" to curChar else endif

		assign listAdd(newList:curChar) to newList
		increment i
	endrun

	return listToString(newList)
end

function split(str:tok)
	if isString(str) equals FALSE return NULL else endif
	if isString(tok) equals FALSE return NULL else endif

	store listFromString(str) in list
	store list() in result
	store list() in temp

	store 0 in i
	store listSize(list) in size
	store "" in char

	while i smaller size
		assign listGet(list:i) to char

		if char equals tok
			assign listAdd(result:listToString(temp)) to result
			assign list() to temp
		else
			assign listAdd(temp:char) to temp
		endif

		increment i
	endrun

	assign listAdd(result:listToString(temp)) to result
	return result
end

function reverse(str)
	if isString(str) equals FALSE return NULL else endif

	assign listToString(listReverse(listFromString(str))) to str

	return str
end

function strSize(str)
	if isString(str) equals FALSE return NULL else endif
	assign listFromString(str) to str
	return listSize(str)
end

function strRepeat(str:num)
	if isString(str) equals FALSE return NULL else endif
	if isNumber(num) equals FALSE return NULL else endif
	if num smallerequals 0 return NULL else endif

	assign str to s

	store 1 in i
	while i smaller num
		assign str plus s to str
		increment i
	endrun

	return str
end

function trim(str)
	if isString(str) equals FALSE return NULL else endif

	store 0 in lastChar
	assign listFromString(str) to str
	store listSize(str) in size
	store 0 in i

	while i smaller size
		if listGet(str:i) unequals " "
			assign i to lastChar
		else endif
		increment i
	endrun

	store -1 in firstChar
	assign 0 to i
	while i smaller size
		if listGet(str:i) unequals " "
			if firstChar equals -1
				assign i to firstChar
			else
			endif
		else
		endif
		increment i
	endrun

	if firstChar equals -1
		assign 0 to firstChar
	else endif

	return substring(listToString(str):firstChar:lastChar)
end

function strContains(str:content)
	if isString(str) equals FALSE return NULL else endif
	if isString(content) equals FALSE return NULL else endif

	store listFromString(str) in bufferStr
	store listFromString(content) in bufferContent

	store listSize(bufferStr) in size
	store listSize(bufferContent) in sizeContent

	store 0 in i
	store 0 in contentPos

	while i smaller size
		if listGet(bufferStr:i) equals listGet(bufferContent:contentPos)
			increment contentPos
		else
			assign 0 to contentPos
		endif

		if contentPos equals sizeContent
			return TRUE
		else endif

		increment i
	endrun

	return FALSE
end

function strStartsWith(str:content)
	if isString(str) equals FALSE return NULL else endif
	if isString(content) equals FALSE return NULL else endif

	store listFromString(content) in bufferContent
	store listSize(bufferContent) in sizeContent

	store listFromString(str) in bufferStr
	store listSize(bufferStr) in sizeStr

	if sizeContent greater sizeStr return FALSE else endif

	store 0 in i

	while i smaller sizeContent
		if listGet(bufferStr:i) unequals listGet(bufferContent:i)
			return FALSE
		else endif

		increment i
	endrun

	return TRUE
end