; Provides standard functions for number processing

function max(n1:n2) if n1 greater n2 return n1 else return n2 endif end
function min(n1:n2) if n1 smaller n2 return n1 else return n2 endif end

function PI() return 3.141592653589793 end
function E() return 2.718281828459045 end

function fibonacci(max)
	store list() in fib
	
	if max smallerequals 0 return fib else endif
	
	if max greaterequals 1
		assign listAdd(fib:0) to fib
		
		if max equals 1 return fib else endif
		
	else endif
	
	if max greaterequals 2
		assign listAdd(fib:1) to fib
	else endif
	
	store 0 in index
	store 0 in firstElement
	store 0 in secondElement
	store 0 in result
	
	run i from 2 to max with i plus 1

		assign i minus 1 to index
		
		assign listGet(fib:index) to firstElement
		
		decrement index
		assign listGet(fib:index) to secondElement
		
		assign firstElement plus secondElement to result
		assign listAdd(fib:result) to fib
	
	endrun
	
	return fib

end

function pow(a:x)
	if isNumber(a) equals FALSE return NULL else endif
	if isNumber(x) equals FALSE return NULL else endif

	return _pow(a:x)
end

function abs(x)
	store 0 in m
	assign x times -1 to m

	if x smaller 0
		return m
	else
		return x
	endif
end

function root(x:n)
	if x smaller 0 return NULL else endif

	store n in m
	decrement m
	
	store x in xn
	assign xn divide 2 to xn
	store pow(xn:n) in p
	
	store 0 in xnext
	assign m times p to xnext
	assign xnext plus x to xnext

	store 0 in tmp
	assign pow(xn:m) to p
	assign n times p to tmp
	assign xnext divide tmp to xnext
	
	store 0.0000000001 in EPSILON
	store 0 in error
	store 0 in trash

	run i from 0 to 100 with i plus 1
		assign abs(xnext) to error
		assign abs(xn) to trash
		assign error minus trash to error
		assign abs(error) to error

		if error smaller EPSILON return xnext else endif

		assign xnext to xn
		assign pow(xn:n) to p
		assign m times p to xnext
		assign xnext plus x to xnext
		assign pow(xn:m) to p
		assign n times p to tmp
		assign xnext divide tmp to xnext
	endrun

	return xnext
end

function sqrt(x)
	return root(x:2)
end

function hasPlaces(n)
	convert n to string
	assign listFromString(n) to n
	store 1 in i

	while i smaller listSize(n)
		if listGet(n:i) equals "."
			return TRUE
		else endif
		increment i
	endrun
	return FALSE
end

function factorial(n)
	if n smallerequals 1
		return 1
	else endif

	store n in temp
	decrement temp
	assign n times factorial(temp) to n
	
	return n
end

function round(base)
	if isNumber(base)  equals FALSE return NULL else endif
	if hasPlaces(base) equals FALSE return base else endif
	
	use jcore/jstring
	
	convert base to string
	store split(base:".") in ele
	
	store listGet(ele:1) in digits
	store listFromString(digits) in strDigits
	
	store listGet(strDigits:0) in firstDigit
	convert firstDigit to number
	
	store listGet(ele:0) in result
	convert result to number
	
	if firstDigit greaterequals 5
		if result smaller 1
			decrement result
		else
			increment result
		endif
	else endif
	
	return result
end